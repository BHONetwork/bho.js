"use strict";(self.webpackChunk_bho_network_docs=self.webpackChunk_bho_network_docs||[]).push([[595],{876:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(2784);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},l=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,p=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=i,y=u["".concat(p,".").concat(m)]||u[m]||d[m]||a;return n?r.createElement(y,s(s({ref:t},l),{},{components:n})):r.createElement(y,s({ref:t},l))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,s=new Array(a);s[0]=u;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var c=2;c<a;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},609:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var r=n(7896),i=(n(2784),n(876));const a={sidebar_position:3},s="Initialize SDK",o={unversionedId:"swap-sdk/getting-started/initialize-sdk",id:"swap-sdk/getting-started/initialize-sdk",title:"Initialize SDK",description:"First, we started by import the SDK class from @bho-network/sdk-swap",source:"@site/docs/swap-sdk/getting-started/initialize-sdk.md",sourceDirName:"swap-sdk/getting-started",slug:"/swap-sdk/getting-started/initialize-sdk",permalink:"bho.js/docs/swap-sdk/getting-started/initialize-sdk",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/swap-sdk/getting-started/initialize-sdk.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Design",permalink:"bho.js/docs/swap-sdk/getting-started/design"},next:{title:"Add liquidity",permalink:"bho.js/docs/swap-sdk/getting-started/add-liquidity"}},p={},c=[],l={toc:c};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"initialize-sdk"},"Initialize SDK"),(0,i.kt)("p",null,"First, we started by import the SDK class from ",(0,i.kt)("inlineCode",{parentName:"p"},"@bho-network/sdk-swap")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { SwapSDK, KeyringPair } from "@bho-network/sdk-swap";\n')),(0,i.kt)("p",null,"To use the SDK, we must initialize it"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},'import { ApiPromise } from "@polkadot/api";\n\n// It\'s your responsibility to initiate ApiPromise instance yourself.\nlet api: ApiPromise;\n\nconst routerContractAddress = "nvngUvEtEPGeFSXeuY8EYxNW4wDtFkLfxhnZbTosFwbC5zxjZ";\nconst factoryContractAddress = "nvmPvMT56YPEs9LsiSHqfYabQf6J2SULHxEBw6gbHCzGMf18c";\n\n// You should have user\'s keypair in someway.\nlet userKeypair: KeyringPair;\n\nconst sdk = SwapSDK.initialize(api, routerContractAddress, factoryContractAddress, userKeypair);\n')),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"userKeypair")," is optional when intialize the SDK, you don't have to provide it in the first place. This is useful since you may want to initialize the SDK first but don't have the keypair at the time. However, some sdk calls require this keypair to query data, sign and submit transactions to the blockchain. You can provide it later through ",(0,i.kt)("inlineCode",{parentName:"p"},"connect()"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-typescript"},"// `connect()` returns a new sdk instance, and you should use this instance instead of the old one.\nconst newSdk = sdk.connect(userKeypair);\n")),(0,i.kt)("p",null,"It's pretty much it, now you can use the sdk instance to interact with BHO Swap."))}d.isMDXComponent=!0}}]);